package nc.bs.export.file.impl;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.RuntimeEnv;
import nc.bs.logging.Logger;
import nc.itf.export.file.IFbsDataFileService;
import nc.itf.spike.ISpike;
import nc.jdbc.framework.processor.BeanListProcessor;
import nc.pub.Constants;
import nc.ui.export.file.pub.FileUtil;
import nc.vo.Export.FbsDataFileItemVO;
import nc.vo.Export.FbsDatafileVO;
import nc.vo.Export.time.FbsExportTimeVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.SuperVO;

/**
 * @ClassName: FbsDataFileServiceImpl
 * <b> 抽取DB文件后台处理类 </b>
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 * 创建日期: 2016年10月13日 上午11:43:10
 * @Version 
 */
public class FbsDataFileServiceImpl implements IFbsDataFileService{
	
	public String Path_sqls = "modules"+ Constants.SEP +"fbsxj"+ Constants.SEP +"cfgs"+ Constants.SEP +"sqls"+ Constants.SEP +"ncehr"+ Constants.SEP +"57"+ Constants.SEP +"oracle"+ Constants.SEP +"05views"+ Constants.SEP;
	
	private String versionfilename = RuntimeEnv.getInstance().getNCHome()+ Constants.SEP+"modules"+ Constants.SEP +"fbsxj"+ Constants.SEP +"cfgs"+ Constants.SEP +"sqls"+ Constants.SEP +"ncehr"+ Constants.SEP +"57"+ Constants.SEP +"oracle"+ Constants.SEP +"07version"+ Constants.SEP+"version.properties";
	/**
	 * 获得nchome路径
	 */
	public String getWorkingDirPath() {
		return RuntimeEnv.getInstance().getNCHome() + Constants.SEP + Path_sqls;
	}
	
	public List<String> getAllCreateSqls() throws BusinessException {
		String scriptFolderPath = getWorkingDirPath();
		File viewsFolder  = new File(scriptFolderPath);
		if (viewsFolder.exists())
		{
			File[] sqlFiles = viewsFolder.listFiles(new ExtFilenameFilter(".sql"));
			if (sqlFiles == null || sqlFiles.length == 0)
			{
				return null;
			}
			
			Arrays.sort(sqlFiles, new FileNameComparator());
			
			// 创建表结构
			List<String> createsqls = new ArrayList<String>();
			for (int i = 0; i<sqlFiles.length; i++) {
				String createsql = FileUtil.readSqlFileContent(sqlFiles[i]);
				createsqls.add(createsql);
			}
			return createsqls;
		} else {
			throw new BusinessException("视图目录：" + viewsFolder.getAbsolutePath() + "下不存在视图文件!");
		}
	}
	
	private BaseDAO dao = null;
	private BaseDAO getDao(){
		if(dao == null){
			dao = new BaseDAO();
		}
		return dao;
	}

	public String insertVOIF(SuperVO vo)  throws BusinessException
	{
		if (vo == null)
		{
			return null;
		}
		return getDao().insertVO(vo);
	}
	
	public void updateVO(SuperVO vo)  throws BusinessException
	{
		if (vo == null)
		{
			return;
		}
		getDao().updateVO(vo);
	}

	public void executeSQLS(String[] sqls) throws BusinessException
	{
		if (sqls == null || sqls.length == 0)
		{
			return;
		}
		
		for (String sql : sqls)
		{
			if (sql != null && sql.trim().length() > 0)
			{
				try
				{
					getDao().executeUpdate(sql);
				}
				catch(Exception e)
				{
					Logger.error(e.getMessage(), e);
					throw new BusinessException("错误:" + e.getMessage() + "SQL:【" + sql + "】", e);
				}
			}
		}
	}
	
	/**
	 * @Title: getSpikeData
	 * @Description: 根据条件获取中间表数据
	 * @Author: 王凯强
	 * @Time: 2016年10月13日 上午11:32:59
	 * @param clazz
	 * @param whereStr
	 * @return
	 * @throws BusinessException
	 */
	@SuppressWarnings("unchecked")
	public List<SuperVO> getSpikeData(Class<?> clazz, String whereStr) throws BusinessException {
		List<SuperVO> list = new ArrayList<SuperVO>();
		try {
			SuperVO superVO= (SuperVO) clazz.newInstance();
			String sql =null;
			String querySql= getQuerySql(superVO, whereStr);
			int i = 0;
			List<SuperVO> voList = new ArrayList<SuperVO>();
			while(true)
			{
				sql=getLimitSql(querySql,i);
				
				voList.clear();
				voList = (List<SuperVO>)getDao().executeQuery(sql, new BeanListProcessor(superVO.getClass()));
				list.addAll(voList);
				if(voList.size()<ISpike.MAXROWS){
					break;
				}
				i++;
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException(e);
		}
		return list;
	}
	
	@SuppressWarnings("unchecked")
	public List<SuperVO> getSpikeDataByPage(Class<?> clazz, String whereStr,int i) throws BusinessException {
		List<SuperVO> list = new ArrayList<SuperVO>();
		try {
			SuperVO superVO= (SuperVO) clazz.newInstance();
			String sql =null;
			String querySql= getQuerySql(superVO, whereStr);
			sql=getLimitSql(querySql,i);
			List<SuperVO> voList = (List<SuperVO>)getDao().executeQuery(sql, new BeanListProcessor(superVO.getClass()));
			list.addAll(voList);
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException(e);
		}
		return list;
	}
	
	private String getLimitSql(String sql_b,int rownum){
		return "select * from (select a.* , rownum rownum_ from (" + sql_b + ") a where rownum <="+ ISpike.MAXROWS*(rownum+1)+") where rownum_ > "+rownum*ISpike.MAXROWS;//ISpike.MAXROWS
	}
	
	private String getQuerySql(SuperVO vo,String whereStr){
		StringBuffer sb = new StringBuffer("select ");
		String[] fields = vo.getAttributeNames(); 
		String tableName = vo.getTableName();
		String strtemp = null;
		for (int i = 0; i < fields.length - 1; i++) {
			strtemp = fields[i];
			if (isJump(tableName,strtemp)) {
				continue;
			}
			sb.append(strtemp + ",");
		}
		sb.append(fields[fields.length-1]);
		sb.append(" from ");
		sb.append( tableName +" where "+whereStr);
		return sb.toString();
	}

	private boolean isJump(String tablename, String fieldname) {
		if ("dr".equals(fieldname) || "ts".equals(fieldname)
				|| "last_time".equals(fieldname)
				|| "this_time".equals(fieldname) || fieldname.endsWith("_old")
				|| "photo".equals(fieldname)  
				|| "unitcode".equals(fieldname)) {
			return true;
		}
		if("exper_code".equals(fieldname) && !"mid_hr_expert".equals(tablename)){
			return true;
		}
		if ("mid_om_dept_workout".equals(tablename)
				&& "deptcode".equals(fieldname)) {
			return true;
		}
		if ("mid_om_job_workout".equals(tablename)
				&& "jobcode".equals(fieldname)) {
			return true;
		}

		if (!"mid_bd_psndoc".equals(tablename) 
				&& ("psnclscope".equals(fieldname) 
				|| "psncode".equals(fieldname))) {
			return true;
		}
		
		if(!"mid_bd_psndoc".equals(tablename) 
				&& !"mid_hi_psndoc_deptchg".equals(tablename) 
				&& "pk_psncl".equals(fieldname)){
			return true;
		}
		if("bas_pkcorp".equals(fieldname)){
			return true;
		}
		return false;
	}
	
	public void saveLogVO(FbsDatafileVO dataFileVO, FbsDataFileItemVO[] bvos,
			FbsExportTimeVO[] tvos) throws BusinessException {
		String pk = getDao().insertVO(dataFileVO);
		for (int i = 0; i < bvos.length; i++) {
			bvos[i].setPk_fbs_datafile(pk);
		}
		getDao().insertVOArray(bvos);
		getDao().insertVOArray(tvos);
	}

	public String getToolVersion() throws BusinessException {
		try{
			FileInputStream input = new FileInputStream(versionfilename);
	        Properties properties = new Properties();
	        properties.load(input);
	        return properties.getProperty("version");
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
		
	}

	public void saveLogVO_RequiresNew(List<SuperVO> vos)
			throws BusinessException {
		getDao().insertVOList(vos);
	}


	
}
